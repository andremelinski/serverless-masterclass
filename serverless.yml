service: s3-sqs-ts

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  timeout: 30 # seconds
  memorySize: 1024 # mb
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  environment:
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}
    QUEUE_NAME: ${self:custom.queue}
    ACCOUNT_UD: ${self:custom.accountId}
    REGION: ${self:custom.region}

custom:
  fileUploadBucketName: ${self:service}-bucket-${self:provider.stage}-321123
  region: ${self:provider.region}
  queue: mailQueue
  accountId: 467159351154

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript

package:
  individually: true

functions:
  s3HtmlUploader:
    handler: src/endpoints/template-upload.handler
    name: s3-file-uploader
    description: A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    # API GATEWAY
    events:
      - http:
          cors: true
          method: POST
          path: /template
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.fileUploadBucketName}/*
  getHtml:
    handler: src/endpoints/get-report.handler
    name: get-template
    description: A lambda handler that retrieves a file from an S3 bucket based on an API Gateway trigger.
    events:
      - http:
          path: template/{uuid}
          method: GET
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.accountId}:${self:custom.queue}
          batchSize: 10
          maximumBatchingWindow: 60
          functionResponseType: ReportBatchItemFailures
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Get*"
          - "s3:Put*"
        Resource: arn:aws:s3:::${self:custom.fileUploadBucketName}/*
      - Effect: Allow
        Action:
          # - sqs:DeleteMessage
          # - sqs:ReceiveMessage
          - sqs:*
        Resource: arn:aws:sqs:${self:provider.region}:${self:custom.accountId}:${self:custom.queue}
  receiver:
    handler: src/common/ses.handler
    description: Receive info from queue and send mail
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:custom.accountId}:${self:custom.queue}
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - sqs:DeleteMessage
          # - sqs:ReceiveMessage
          - sqs:*
        Resource: arn:aws:sqs:${self:provider.region}:${self:custom.accountId}:${self:custom.queue}
      - Effect: Allow
        Action:
          - ses:*
        Resource: arn:aws:ses:${self:provider.region}:${self:custom.accountId}

  
# resources:
#   Resources:
#     receiverQueue:
#       Type: AWS::SQS::Queue
#       Properties:
#         QueueName: mailsqs
    # FileBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.fileUploadBucketName}
    #     AccessControl: PublicRead
    #     VersioningConfiguration:
    #       Status: Enabled